package com.fastcampus.kafkahandson.ugc.adapter.inspectedpost;

import com.fastcampus.kafkahandson.ugc.CustomObjectMapper;
import com.fastcampus.kafkahandson.ugc.InspectedPostMessageProducePort;
import com.fastcampus.kafkahandson.ugc.adapter.common.OperationType;
import com.fastcampus.kafkahandson.ugc.adapter.common.Topic;
import com.fastcampus.kafkahandson.ugc.inspectedpost.InspectedPost;
import com.fasterxml.jackson.core.JsonProcessingException;
import lombok.RequiredArgsConstructor;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Component;

@Component
@RequiredArgsConstructor
public class InspectedPostMessageProduceAdapter implements InspectedPostMessageProducePort {

    private final KafkaTemplate<String, String> kafkaTemplate;
    private final CustomObjectMapper objectMapper = new CustomObjectMapper();

    @Override
    public InspectedPost sendCreateMessage(InspectedPost inspectedPost) {
        return sendMessage(inspectedPost, OperationType.CREATE);
    }

    @Override
    public InspectedPost sendUpdateMessage(InspectedPost inspectedPost) {
        return sendMessage(inspectedPost, OperationType.UPDATE);
    }

    @Override
    public InspectedPost sendDeleteMessage(InspectedPost inspectedPost) {
        return sendMessage(inspectedPost, OperationType.DELETE);
    }

    private InspectedPost sendMessage(InspectedPost inspectedPost, OperationType operationType) {
        InspectedPostMessage converted = convertToMessage(inspectedPost, operationType);
        send(converted);
        return inspectedPost;
    }

    private void send(InspectedPostMessage message) {
        try {
            kafkaTemplate.send(
                    Topic.INSPECTED_POST,
                    message.toString(),
                    objectMapper.writeValueAsString(message)
            );
        } catch (JsonProcessingException e) {
            throw new RuntimeException(e);
        }
    }

    private InspectedPostMessage convertToMessage(InspectedPost inspectedPost, OperationType operationType) {
        return new InspectedPostMessage(
                inspectedPost.getPost().getId(),
                (operationType == OperationType.DELETE)
                        ? null
                        : new InspectedPostMessage.Payload(
                                inspectedPost.getPost(),
                                inspectedPost.getCategoryName(),
                                inspectedPost.getAutoGeneratedTags(),
                                inspectedPost.getInspectedAt()
                ),
                operationType
        );
    }
}
